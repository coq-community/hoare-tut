opam-version: "2.0"
maintainer: "kartiksinghal@gmail.com"
version: "8.11.1"

homepage: "https://github.com/coq-community/hoare-tut"
dev-repo: "git+https://github.com/coq-community/hoare-tut.git"
bug-reports: "https://github.com/coq-community/hoare-tut/issues"
license: "LGPL-3.0-or-later"

synopsis: "A Tutorial on Reflecting in Coq the generation of Hoare proof obligations"
description: """
Hoare logics are "program logics" suitable for reasoning about
imperative programs.
This work is both an introduction to Hoare logic and a demo
illustrating Coq nice features. It formalizes the generation of PO
(proof obligations) in a Hoare logic for a very basic imperative
programming language. It proves the soundness and the completeness of
the PO generation both in partial and total correctness. At last, it
examplifies on a very simple example (a GCD computation) how the PO
generation can simplify concrete proofs. Coq is indeed able to compute
PO on concrete programs: we say here that the generation of proof
obligations is reflected in Coq. Technically, the PO generation is
here performed through Dijkstra's weakest-precondition calculus.
"""

build: [make "-j%{jobs}%" ]
install: [make "install"]
depends: [
  "coq"
]

tags: [
  "category:Mathematics/Logic/See also"
  "category:Computer Science/Semantics"
  "category:Compilation/Semantics"
  "keyword:Hoare logic"
  "keyword:imperative program"
  "keyword:weakest precondition"
  "keyword:reflection"
  "logpath:HoareTut"
]
authors: [
  "Sylvain Boulm√©"
]
